// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Hand = (function(superClass) {
    extend(Hand, superClass);

    function Hand() {
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      this.add(this.deck.pop().setFaceUp());
      if (this.bestScore() === 0) {
        this.trigger("bust");
      }
      if (this.bestScore() === 21) {
        return this.trigger("reachedTwentyOne");
      }
    };

    Hand.prototype.autoHit = function() {
      if (this.bestScore() < 17 && this.bestScore() !== 0) {
        return setTimeout((function(_this) {
          return function() {
            _this.hit();
            return _this.autoHit();
          };
        })(this), 500);
      } else {
        return this.trigger("finishedHitting");
      }
    };

    Hand.prototype.reveal = function() {
      return this.at(0).setFaceUp();
    };

    Hand.prototype.hasAce = function() {
      return this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, 0);
    };

    Hand.prototype.minScore = function() {
      return this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
    };

    Hand.prototype.scores = function() {
      return [this.minScore(), this.minScore() + 10 * this.hasAce()];
    };

    Hand.prototype.bestScore = function() {
      var adjustedScore, score;
      adjustedScore = (function() {
        var i, len, ref, results;
        ref = this.scores();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          score = ref[i];
          if (score > 21) {
            results.push(0);
          } else {
            results.push(score);
          }
        }
        return results;
      }).call(this);
      return Math.max.apply(Math, adjustedScore);
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=Hand.js.map

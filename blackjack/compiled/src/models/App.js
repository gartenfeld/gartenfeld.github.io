// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App = (function(superClass) {
    extend(App, superClass);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      this.set('bank', new Bank({
        app: this
      }));
      this.get('bank').on('betsPlaced', this.closeBets, this);
      return this.takeBets();
    };

    App.prototype.takeBets = function() {
      $('#message').css({
        'opacity': 0
      });
      this.get('bank').startBetting();
      return this.set('state', 'takeBets');
    };

    App.prototype.closeBets = function() {
      return this.deal();
    };

    App.prototype.deal = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('bust', this.judge.bind(this));
      this.get('dealerHand').on('bust', this.judge.bind(this));
      this.get('playerHand').on('reachedTwentyOne', this.stand.bind(this));
      this.get('dealerHand').on('finishedHitting', this.judge.bind(this));
      this.set('state', 'gamePlay');
      this.trigger('refresh');
      if (this.get('playerHand').bestScore() === 21) {
        this.set('state', 'blackjack');
        return this.get('bank').payout('blackjack');
      }
    };

    App.prototype.stand = function() {
      this.get('dealerHand').reveal();
      this.set('state', 'dealerTurn');
      return this.get('dealerHand').autoHit();
    };

    App.prototype.judge = function() {
      this.set('state', 'dealerTurn');
      if (this.get('playerHand').bestScore() > this.get('dealerHand').bestScore()) {
        this.get('bank').payout('win');
      } else if (this.get('playerHand').bestScore() < this.get('dealerHand').bestScore()) {
        $('#message').css({
          'opacity': 1
        });
        $('#message').text('You lost $' + this.get('bank').get('currentBet'));
      } else {
        this.get('bank').payout('push');
      }
      return this.set('state', 'finished');
    };

    App.prototype.reset = function() {
      return this.takeBets();
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.js.map
